function ths_mat = scaraikine(l_vec,tool_SE3)
% get inverse kinematics of scara robot from tool frame (SE3)
%SCARAIKINE
%    THS_MAT = SCARAIKINE(L1,L2,XT,YT,ZT,PHT)

%    This function was generated by the Symbolic Math Toolbox version 8.2.
%    06-Aug-2019 18:31:42

if ~isa(tool_SE3,'SE3')
    error('tool_SE3 should be an SE3 object.')
end

tool_Tmat = tool_SE3.T;

for i=1:size(tool_Tmat,3)
    pT = transl(tool_Tmat(:,:,i));
    RT = t2r(tool_Tmat(:,:,i));
    thT = vex(logm(RT));
    tool_mat(i,:) = [pT',thT'];
end

l1 = l_vec(1); l2 = l_vec(2); l3 = l_vec(3);
[m,n] = size(tool_mat);
for i=1:m
    xt = tool_mat(i,1); yt = tool_mat(i,2); zt = tool_mat(i,3);
    if n==4
        pht = tool_mat(i,4);
    else
        if n==6
            pht = tool_mat(i,6);
        else
            error('The column number of tool_mat should be either 4 or 6.')
        end
    end
    
    if zt>l3||zt<-0.1
        error('zt should be within [0, l3].')
    end
    
    t2 = l1.^2;
    t3 = l2.^2;
    t4 = xt.^2;
    t5 = yt.^2;
    t6 = l1.*l2.*2.0;
    t7 = -t2-t3+t4+t5+t6;
    t8 = t2+t3-t4-t5+t6;
    t9 = t7.*t8;
    t10 = sqrt(t9);
    t11 = 1.0./t7;
    t12 = l1.*xt.*2.0;
    t13 = t2-t3+t4+t5+t12;
    t14 = 1.0./t13;
    t15 = l1.*yt.*2.0;
    t16 = t4.*t10.*t11;
    t17 = t5.*t10.*t11;
    t18 = l1.*l2.*t10.*t11.*2.0;
    t19 = t10.*t11;
    t20 = atan(t19);
    ths = reshape([atan(t14.*(t15+t16+t17+t18-t2.*t10.*t11-t3.*t10.*t11)).*2.0,atan(t14.*(t15-t16-t17-t18+t2.*t10.*t11+t3.*t10.*t11)).*2.0,t20.*-2.0,t20.*2.0,pht,pht,zt,zt],[2,4]);
    ths_mat_tmp(i,:,1) = ths(1,:);
    ths_mat_tmp(i,:,2) = ths(2,:);
end

% elimilate 0 imag part
ths_mat = nan*ones(size(ths_mat_tmp));
th_idx = imag(ths_mat_tmp)==0;
ths_mat(th_idx)= real(ths_mat_tmp(th_idx));

% elimilate nan
nan_idx = find(isnan(ths_mat));
if ~isempty(nan_idx)
    for i=1:length(nan_idx)
        row_del(i) = mod(nan_idx(i),size(ths_mat,1));
    end
    ths_mat(row_del,:,:) = [];
end
